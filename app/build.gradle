plugins {
  id "com.google.protobuf" version "0.8.12"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'dagger.hilt.android.plugin'

kapt {
  arguments {
    arg("room.schemaLocation", "$projectDir/schemas".toString())
    arg("room.incremental", "true")
  }
}

android {
  compileSdkVersion 31

  defaultConfig {
    applicationId "dev.sasikanth.pinnit"
    minSdkVersion 23
    targetSdkVersion 31
    versionCode rootProject.gitCommitCount
    versionName "1.2.0"

    testInstrumentationRunner "dev.sasikanth.pinnit.AndroidTestRunner"

    vectorDrawables.useSupportLibrary = true
    archivesBaseName = "pinnit-v${versionName}"
  }

  sourceSets {
    androidTest.assets.srcDirs += files("$projectDir/schemas".toString())

    String sharedTestDir = 'src/sharedTest/java'
    test {
      java.srcDir sharedTestDir
    }
    androidTest {
      java.srcDir sharedTestDir
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug {
      applicationIdSuffix = '.debug'
    }
  }
  buildFeatures {
    compose true
    viewBinding true
  }
  compileOptions {
    coreLibraryDesugaringEnabled true

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  }
  composeOptions {
    kotlinCompilerExtensionVersion "$versions.compose"
  }
  kotlinOptions {
    jvmTarget = 1.8

    // Enabling experimental coroutines APIs
    freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
    freeCompilerArgs += "-Xopt-in=kotlin.time.ExperimentalTime"
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.10.0"
  }

  // Generates the java Protobuf-lite code for the Protobufs in this project. See
  // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
  // for more information.
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        java {
          option 'lite'
        }
      }
    }
  }
}

dependencies {
  coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$versions.coreLibraryDesugaring"

  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
  implementation "androidx.appcompat:appcompat:$versions.appCompat"
  implementation "androidx.core:core-ktx:$versions.coreKtx"

  implementation "androidx.activity:activity-compose:$versions.activity"
  implementation "androidx.fragment:fragment-ktx:$versions.fragment"

  implementation "androidx.constraintlayout:constraintlayout:$versions.constraintLayout"

  implementation "com.google.android.material:material:$versions.material"

  implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
  implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

  implementation "androidx.room:room-runtime:$versions.room"
  implementation "androidx.room:room-ktx:$versions.room"
  kapt "androidx.room:room-compiler:$versions.room"

  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
  implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycle"
  implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"

  implementation "androidx.preference:preference-ktx:$versions.preference"

  implementation "androidx.work:work-runtime-ktx:$versions.workManager"

  debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"

  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

  implementation "com.google.dagger:hilt-android:$versions.dagger"
  kapt "com.google.dagger:hilt-android-compiler:$versions.dagger"

  implementation "com.spotify.mobius:mobius-core:$versions.mobius"
  implementation "com.spotify.mobius:mobius-android:$versions.mobius"

  implementation "de.hdodenhof:circleimageview:$versions.circleImageView"

  implementation "dev.chrisbanes:insetter-ktx:$versions.insetter"

  implementation "me.saket:better-link-movement-method:$versions.betterLinkMovement"

  implementation "androidx.vectordrawable:vectordrawable-seekable:$versions.seekableAVD"

  implementation "androidx.datastore:datastore:$versions.dataStore"
  implementation  "com.google.protobuf:protobuf-javalite:$versions.javaLite"

  implementation "io.github.reactivecircus.flowbinding:flowbinding-material:$versions.flowBinding"

  implementation "androidx.compose.material:material:$versions.compose"
  implementation "androidx.compose.animation:animation:$versions.compose"
  implementation "androidx.compose.ui:ui-tooling:$versions.compose"
  implementation "com.google.android.material:compose-theme-adapter:$versions.compose"

  testImplementation "junit:junit:$versions.junit"
  testImplementation "androidx.room:room-testing:$versions.room"
  testImplementation "com.google.truth:truth:$versions.truth"
  testImplementation "androidx.arch.core:core-testing:$versions.arch"
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$versions.mockito"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
  testImplementation "com.spotify.mobius:mobius-test:$versions.mobius"

  androidTestImplementation "androidx.room:room-testing:$versions.room"
  androidTestImplementation "androidx.test.ext:junit:$versions.extJunit"
  androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espressoCore"
  androidTestImplementation "com.google.truth:truth:$versions.truth"
  androidTestImplementation "androidx.work:work-testing:$versions.workManager"
  androidTestImplementation "com.google.dagger:hilt-android-testing:$versions.dagger"
  kaptAndroidTest "com.google.dagger:hilt-android-compiler:$versions.dagger"
}
